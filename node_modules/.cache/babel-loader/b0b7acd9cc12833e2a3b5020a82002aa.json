{"ast":null,"code":"import axios from 'axios';\n\nconst handleError = error => error.response ? {\n  error: {\n    error: error.response.status,\n    message: error.response.data\n  }\n} : {\n  error\n};\n\nconst handleSuccess = response => ({\n  data: response.data,\n  headers: response.headers\n});\n/**\n * Make HTTP POST call\n * @param {string} url\n * @param {string} query\n * @param {string} token\n *\n * @returns {{json: Object|undefined, error: Object|undefined}} response\n * @returns {Object|undefined} response.json\n * @returns {{status: Object, message: Object}|Object|undefined} response.error\n *\n * @example\n * get(\"http://management-api\", \"?search=bonus\", \"asd32eD5F\");\n */\n\n\nexport const get = (url, query, token) => {\n  const req = axios.get(encodeURI(url + (query || '')), token && {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return req.then(handleSuccess).catch(handleError);\n};","map":{"version":3,"sources":["/Users/sabinapsuj/Learn/novomatic-recruitment-task/src/redux/api/index.js"],"names":["axios","handleError","error","response","status","message","data","handleSuccess","headers","get","url","query","token","req","encodeURI","Authorization","then","catch"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,WAAW,GAAGC,KAAK,IACvBA,KAAK,CAACC,QAAN,GACI;AACAD,EAAAA,KAAK,EAAE;AACLA,IAAAA,KAAK,EAAEA,KAAK,CAACC,QAAN,CAAeC,MADjB;AAELC,IAAAA,OAAO,EAAEH,KAAK,CAACC,QAAN,CAAeG;AAFnB;AADP,CADJ,GAOI;AAAEJ,EAAAA;AAAF,CARN;;AAWA,MAAMK,aAAa,GAAGJ,QAAQ,KAAK;AACjCG,EAAAA,IAAI,EAAEH,QAAQ,CAACG,IADkB;AAEjCE,EAAAA,OAAO,EAAEL,QAAQ,CAACK;AAFe,CAAL,CAA9B;AAKA;;;;;;;;;;;;;;;AAaA,OAAO,MAAMC,GAAG,GAAG,CAACC,GAAD,EAAMC,KAAN,EAAaC,KAAb,KAAuB;AACxC,QAAMC,GAAG,GAAGb,KAAK,CACdS,GADS,CAERK,SAAS,CAACJ,GAAG,IAAIC,KAAK,IAAI,EAAb,CAAJ,CAFD,EAGRC,KAAK,IAAI;AACPJ,IAAAA,OAAO,EAAE;AACPO,MAAAA,aAAa,EAAG,UAASH,KAAM;AADxB;AADF,GAHD,CAAZ;AAUA,SAAOC,GAAG,CAACG,IAAJ,CAAST,aAAT,EAAwBU,KAAxB,CAA8BhB,WAA9B,CAAP;AACD,CAZM","sourcesContent":["import axios from 'axios';\n\nconst handleError = error => (\n  error.response\n    ? {\n      error: {\n        error: error.response.status,\n        message: error.response.data,\n      },\n    }\n    : { error }\n);\n\nconst handleSuccess = response => ({\n  data: response.data,\n  headers: response.headers,\n});\n\n/**\n * Make HTTP POST call\n * @param {string} url\n * @param {string} query\n * @param {string} token\n *\n * @returns {{json: Object|undefined, error: Object|undefined}} response\n * @returns {Object|undefined} response.json\n * @returns {{status: Object, message: Object}|Object|undefined} response.error\n *\n * @example\n * get(\"http://management-api\", \"?search=bonus\", \"asd32eD5F\");\n */\nexport const get = (url, query, token) => {\n  const req = axios\n    .get(\n      encodeURI(url + (query || '')),\n      token && {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      },\n    );\n\n  return req.then(handleSuccess).catch(handleError);\n};\n"]},"metadata":{},"sourceType":"module"}